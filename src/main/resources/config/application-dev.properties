#https://segmentfault.com/a/1190000004315890
#http://blog.csdn.net/xiaoyu411502/article/details/48049099
# ===================================================================
# spring boot 默认视图解析顺序（mvc \ thymeleaf \ freemarker）
#	1、当只有其中一个存在时，不会有冲突现象。只会记载当前存在的视图。
#	2、当mvc与thymeleaf同时存在时，如果thymeleaf不指定viewnames路径，就只能解析thymeleaf。
#	3、当需要mvc与thymeleaf同时使用时，必须指定thymeleaf的viewnames路径，否则mvc无法使用。
#	4、当freemarker和其他两个同时存在时，如果freemarker不指定viewnames路径，优先使用freemarker。
#------------------------------------------总部集群 by lvyuxue --------------------------------------------
spring.datasource.url=jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = 172.16.3.57)(PORT = 1521))(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME = testdb2)))
spring.datasource.driverClassName=oracle.jdbc.driver.OracleDriver
spring.datasource.username=kepler_sea
spring.datasource.password=https_bonc_3om
spring.datasource.initialSize=5
spring.datasource.maxActive=20
spring.datasource.minIdle=0
spring.datasource.maxWait=60000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.testWhileIdle=false
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=25200000
spring.datasource.removeAbandoned=true
spring.datasource.removeAbandonedTimeout=1800
spring.datasource.logAbandoned=true
spring.datasource.filters=mergeStat
#----------数据库多用户配置--------------------------------------------------------
#服务基础信息用户
DB_SEA=kepler_sea
#--------------jpa设置------------------------------------------------
spring.jpa.database=oracle
# Hibernate ddl auto (create, create-drop, update)
#启动时如果库中没有对应的表就自动创建
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
#---------------------------------------------DATABASE MYBATIS CONFIG------------------------------------------------
spring.mybatis.configLocation=classpath:mybatis-config.xml
#spring.mybatis.typeAliasesPackage=
spring.mybatis.mapperLocations=classpath*:com/kepler/sea/**/*.xml
# LOGGING
#logging.path=/var/log
#logging.file=
logging.config=classpath:logback.xml

# IDENTITY (ContextIdApplicationContextInitializer)
#spring.application.name=@project.description@
#spring-boot admin server url
#spring.boot.admin.url=http://localhost:8679/monitor/
#spring.application.index=
info.version=@project.version@
#默认首页设置
spring.default.index=/view/html/home.html
#============================================================================================================
#server (ServerAutoConfiguration)
#server.address指定server绑定的地址
#server.compression.enabled是否开启压缩，默认为false.
#server.compression.excluded-user-agents指定不压缩的user-agent，多个以逗号分隔，默认值为:text/html,text/xml,text/plain,text/css
#server.compression.mime-types指定要压缩的MIME type，多个以逗号分隔.
#server.compression.min-response-size执行压缩的阈值，默认为2048
#server.context-parameters.[param name]设置servlet context 参数
#设定应用的context-path.
server.context-path=/tcm
#server.display-name设定应用的展示名称，默认: application
#server.jsp-servlet.class-name设定编译JSP用的servlet，默认: org.apache.jasper.servlet.JspServlet)
#server.jsp-servlet.init-parameters.[param name]设置JSP servlet 初始化参数.
#server.jsp-servlet.registered设定JSP servlet是否注册到内嵌的servlet容器，默认true
#设定http监听端口 ,args 参数：--server.port=8080
server.port=${port:8040}
#server.servlet-path设定dispatcher servlet的监听路径，默认为: /
#============================================================================================================
#tomcat (TomcatAutoConfiguration)
#server.tomcat.access-log-enabled是否开启access log ，默认: false)
#server.tomcat.access-log-pattern设定access logs的格式，默认: common
#server.tomcat.accesslog.directory设定log的目录，默认: logs
#server.tomcat.accesslog.enabled是否开启access log，默认: false
#server.tomcat.accesslog.pattern设定access logs的格式，默认: common
#server.tomcat.accesslog.prefix设定Log 文件的前缀，默认: access_log
#server.tomcat.accesslog.suffix设定Log 文件的后缀，默认: .log
#server.tomcat.background-processor-delay后台线程方法的Delay大小: 30
#server.tomcat.basedir设定Tomcat的base 目录，如果没有指定则使用临时目录.
#server.tomcat.internal-proxies设定信任的正则表达式，默认:“10\.\d{1,3}\.\d{1,3}\.\d{1,3}| 192\.168\.\d{1,3}\.\d{1,3}| 169\.254\.\d{1,3}\.\d{1,3}| 127\.\d{1,3}\.\d{1,3}\.\d{1,3}| 172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}| 172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}”
#server.tomcat.max-http-header-size设定http header的最小值，默认: 0
#server.tomcat.max-threads设定tomcat的最大工作线程数，默认为: 0
#server.tomcat.port-header设定http header使用的，用来覆盖原来port的value.
#server.tomcat.protocol-header设定Header包含的协议，通常是 X-Forwarded-Proto，如果remoteIpHeader有值，则将设置为RemoteIpValve.
#server.tomcat.protocol-header-https-value设定使用SSL的header的值，默认https.
#server.tomcat.remote-ip-header设定remote IP的header，如果remoteIpHeader有值，则设置为RemoteIpValve
#server.tomcat.uri-encoding设定URI的解码字符集.

#keytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=123456
#server.ssl.keyStoreType=PKCS12
#server.ssl.keyAlias:tomcat
#---------------------------------------------MVC CONFIG-----------------------------------------------------
#============================================================================================================
#MVC    (MvcAutoConfiguration)
#spring.mvc.async.request-timeout设定async请求的超时时间，以毫秒为单位，如果没有设置的话，以具体实现的超时时间为准，比如tomcat的servlet3的话是10秒.
#spring.mvc.date-format设定日期的格式，比如dd/MM/yyyy.
#spring.mvc.favicon.enabled是否支持favicon.ico，默认为: true
#spring.mvc.ignore-default-model-on-redirect在重定向时是否忽略默认model的内容，默认为true
#spring.mvc.locale指定使用的Locale.
#spring.mvc.message-codes-resolver-format指定message codes的格式化策略(PREFIX_ERROR_CODE,POSTFIX_ERROR_CODE).
#指定mvc视图的前缀.
spring.mvc.view.prefix=/WEB-INF/view/
#spring.mvc.view.prefix=classpath:/view/
#指定mvc视图的后缀.
spring.mvc.view.suffix=.jsp
# 自定义属性，可以在Controller中读取
application.hello=Hello Angel From application
#rest api ip 与 ATOK 校验拦截器是否启用，默认： true
spring.rest.token.enabled=false
#数据库字段key转换，默认1(不转换也就是大写)、2（转换成小写） 3（转换成驼峰）
spring.rest.key.enabled=3
#如果接口参数值为空则通过开关控制是将条件去除还是按空查询 默认true 按空查询
spring.rest.param.enabled=false
#============================================================================================================
#MESSAGES    (MessagesAutoConfiguration)
#spring.messages.basename指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始，默认: messages
#spring.messages.cache-seconds设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1
#spring.messages.encoding设定Message bundles的编码，默认: UTF-8
#============================================================================================================
#RESOURCES    (ResourcesAutoConfiguration)
#spring.resources.add-mappings是否开启默认的资源处理，默认为true
#spring.resources.cache-period设定资源的缓存时效，以秒为单位.
#spring.resources.chain.cache是否开启缓存，默认为: true
#spring.resources.chain.enabled是否开启资源 handling chain，默认为false
#spring.resources.chain.html-application-cache是否开启h5应用的cache manifest重写，默认为: false
#spring.resources.chain.strategy.content.enabled是否开启内容版本策略，默认为false
#spring.resources.chain.strategy.content.paths指定要应用的版本的路径，多个以逗号分隔，默认为:[/**]
#spring.resources.chain.strategy.fixed.enabled是否开启固定的版本策略，默认为false
#spring.resources.chain.strategy.fixed.paths指定要应用版本策略的路径，多个以逗号分隔
#spring.resources.chain.strategy.fixed.version指定版本策略使用的版本号
#指定静态资源路径，默认为classpath:[/META-INF/resources/,/resources/, /static/, /public/]以及context:/
#spring.resources.static.locations
#静态资源配置映射关系，多个用逗号隔开，key不能重复；例如：classpath:/public/sea/=/page/**,classpath:/public/pages/=/page/**
spring.default.static.locations=classpath:/public/pages/=/view/**
#============================================================================================================
#HTTP    (HttpAutoConfiguration)
#spring.hateoas.apply-to-primary-object-mapper设定是否对object mapper也支持HATEOAS，默认为: true
#spring.http.converters.preferred-json-mapper是否优先使用JSON mapper来转换.
#spring.http.encoding.charset指定http请求和相应的Charset，默认: UTF-8
#spring.http.encoding.enabled是否开启http的编码支持，默认为true
#spring.http.encoding.force是否强制对http请求和响应进行编码，默认为true

#============================================================================================================
#MULTIPART    (MultipartAutoConfiguration)
#multipart.enabled是否开启文件上传支持，默认为true
#multipart.file-size-threshold设定文件写入磁盘的阈值，单位为MB或KB，默认为0
#multipart.location指定文件上传路径.
#multipart.max-file-size指定文件大小最大值，默认1MB
#multipart.max-request-size指定每次请求的最大值，默认为10MB
#============================================================================================================
#THYMELEAF(ThymeleafAutoConfiguration)
#是否开启模板缓存，默认true
spring.thymeleaf.cache=false
#是否检查模板路径是否存在，默认true
spring.thymeleaf.check-template-location=true
#指定Content-Type，默认为: text/html
spring.thymeleaf.content-type=text/html
#是否允许MVC使用Thymeleaf，默认为: true
spring.thymeleaf.enabled=false
#指定模板的编码，默认为: UTF-8
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.excluded-view-names指定不使用模板的视图名称，多个以逗号分隔.
#指定模板的模式，具体查看StandardTemplateModeHandlers，默认为: HTML5
spring.thymeleaf.mode=HTML5
#指定模板的前缀，默认为:classpath:/templates/
spring.thymeleaf.prefix=classpath:/templates/
#指定模板的后缀，默认为:.html
spring.thymeleaf.suffix=.html
#指定模板的解析顺序，默认为第一个.
#spring.thymeleaf.template-resolver-order=2
#指定使用模板的视图名，多个以逗号分隔.(如果要同时使用mvc.view和thymeleaf[thlf/index]，必须指定该项，且不与mvc 返回视图重复：eg: [page/index] 和[thlf/index])
spring.thymeleaf.view-names=thlf/*
#============================================================================================================
#FREEMARKER(FreemarkerAutoConfiguration)
#spring.freemarker.allow-request-override指定HttpServletRequest的属性是否可以覆盖controller的model的同名项
#spring.freemarker.allow-session-override指定HttpSession的属性是否可以覆盖controller的model的同名项
#spring.freemarker.cache是否开启template caching.
#spring.freemarker.charset设定Template的编码.
#是否检查templates路径是否存在.
spring.freemarker.check-template-location=true
#spring.freemarker.content-type设定Content-Type.
#是否允许mvc使用freemarker.
spring.freemarker.enabled=false
#设定模板的后缀.
spring.freemarker.suffix=.html
#设定模板的加载路径，多个以逗号分隔，默认: classpath:/templates/
spring.freemarker.template-loader-path=classpath:/templates/
#指定使用模板的视图列表.
spring.freemarker.view-names=fmkr/*
#============================================================================================================
# redis RedisProperties)
spring.redis.database=4
#指定Redis server host，默认为: localhost
spring.redis.host=172.16.14.25
#指定Redis server的密码
#spring.redis.password
#设置redis是否启用，默认true(支持环境不允许使用redis的情况)
spring.redis.enabled=true
#spring.redis.pool.max-active指定连接池最大的活跃连接数，-1表示无限，默认为8
#spring.redis.pool.max-idle指定连接池最大的空闲连接数，-1表示无限，默认为8
#指定当连接池耗尽时，新获取连接需要等待的最大时间，以毫秒单位，-1表示无限等待
#spring.redis.pool.max-wait=
#指定连接池中空闲连接的最小数量，默认为0
spring.redis.pool.min-idle=0
#指定redis服务端端口，默认: 6379
spring.redis.port=6379
#指定redis server的名称
#spring.redis.sentinel.master=
#指定sentinel节点，逗号分隔，格式为host:port.
#spring.redis.sentinel.nodes=172.16.14.25:6379,localhost:6379
#指定连接超时时间，毫秒单位，默认为0
spring.redis.timeout=0
#============================================================================================================
# SPRING SESSION (SessionProperties)
# Sessions flush mode.
#spring.session.hazelcast.flush-mode=on-save
# Name of the map used to store sessions.
#spring.session.hazelcast.map-name=spring:session:sessions
# Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.
#spring.session.jdbc.initializer.enabled=
# Path to the SQL file to use to initialize the database schema.
#spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql
#spring.session.jdbc.table-name=SPRING_SESSION
# Collection name used to store sessions.
#spring.session.mongo.collection-name=sessions
# Sessions flush mode.
#spring.session.redis.flush-mode=on-save
#Namespace for keys used to store sessions.
#spring.session.redis.namespace=
# Session store type.
#spring.session.store-type=
#============================================================================================================
# SOLR (SolrProperties})
#spring.data.solr.host=http://127.0.0.1:8983/solr
#spring.data.solr.zkHost=
#spring.data.solr.repositories.enabled=true # if spring data repository support is enabled
#---------------------------------------------SECURITY CONFIG------------------------------------------------
#============================================================================================================
# SECURITY (SecurityProperties)
#管理员登陆url地址
security.login.url=/login.html
#客户登陆url地址
security.custom.login.url=/view/portals/login.html
#接口服务平台的首页-----by lvyuxue-----------------
security.platform.index.url=/view/homepage/index.html

#应用模块请求路径---------add  by lvyx-------------
security.app.index.url=/portals/index.html

#自定义用户信息，session保存key
#security.user.session.key=user_session
#通过请求参数，动态指定跳转地址key,默认：j_targetUrl
#security.paramter.url.key=j_targetUrl
#设置总是跳转到用户默认自定义重定向地址，默认：false
#security.always.default.targeturl=true
#默认登陆成功用户自定义重定向地址，只有security.always.default.targeturl=true才有效
#security.default.target.url=/home.html
security.default.target.url=/view/manage/home.html
#默认登陆失败重定向地址
security.default.failure.url=/login.html?error=user
#客户登陆失败重定向地址
security.custom.failure.url=/view/portals/login.html?error=user
#客户成功退出跳转地址 改为跳转到平台的首页 by lvyuxue 原 /view/portals/login.html
security.custom.logout.success.url=/view/homepage/index.html
#成功退出跳转地址 改为跳转平台首页 by lvyuxue 原 /login.html
security.logout.success.url=/view/homepage/index.html
#是否内部转向，默认false
forward.to.destination=false
#要使用权限控制模式.ROLE ,AUTHENTICATED
#security.basic.authorize-mode=ROLE
#是否开启基本的鉴权，默认为true
security.basic.enabled=false
#需要鉴权的path，多个的话以逗号分隔，默认为[/**]
security.basic.path=/**
#HTTP basic realm 的名字，默认为Spring
#security.basic.realm=
#是否开启cross-site request forgery校验，默认为false.
#security.enable-csrf
#security.filter-orderSecurity filter chain的order，默认为0
#security.headers.cache是否开启http头部的cache控制，默认为false.
#是否开启X-Content-Type-Options头部，默认为false.
security.headers.content-type=false
#是否开启X-Frame-Options头部，默认为false.
security.headers.frame=false
#指定HTTP Strict Transport Security (HSTS)模式(none, domain, all).
#security.headers.hsts
#security.headers.xss是否开启cross-site scripting (XSS) 保护，默认为false.
#指定不鉴权的路径，多个的话以逗号分隔.
security.ignored=/frame/**,/base/**,/img/**,/images/**,/js/**,/script/**,/css/**,/json/**,/view/js/**,/view/css/**,/view/images/**,/view/base/**,/rest/**,/static/**,/except/**,/oauth2/authorize,/oauth2/token,/oauth2/checkToken,/oauth2/getParam,/oauth2/getUserToken,/sysLogin/getKey
#security.oauth2.client.access-token-uri指定获取access token的URI.
#security.oauth2.client.access-token-validity-seconds指定access token失效时长.
#security.oauth2.client.additional-information.[key]设定要添加的额外信息.
#security.oauth2.client.authentication-scheme指定传输不记名令牌(bearer token)的方式(form, header, none,query)，默认为header
#security.oauth2.client.authorities指定授予客户端的权限.
#security.oauth2.client.authorized-grant-types指定客户端允许的grant types.
#security.oauth2.client.auto-approve-scopes对客户端自动授权的scope.
#security.oauth2.client.client-authentication-scheme传输authentication credentials的方式(form, header, none, query)，默认为header方式
#security.oauth2.client.client-id指定OAuth2 client ID.
#security.oauth2.client.client-secret指定OAuth2 client secret. 默认是一个随机的secret.
#security.oauth2.client.grant-type指定获取资源的access token的授权类型.
#security.oauth2.client.id指定应用的client ID.
#security.oauth2.client.pre-established-redirect-uri服务端pre-established的跳转URI.
#security.oauth2.client.refresh-token-validity-seconds指定refresh token的有效期.
#security.oauth2.client.registered-redirect-uri指定客户端跳转URI，多个以逗号分隔.
#security.oauth2.client.resource-ids指定客户端相关的资源id，多个以逗号分隔.
#security.oauth2.client.scopeclient的scope
#security.oauth2.client.token-name指定token的名称
#security.oauth2.client.use-current-uri是否优先使用请求中URI，再使用pre-established的跳转URI. 默认为true
#security.oauth2.client.user-authorization-uri用户跳转去获取access token的URI.
#security.oauth2.resource.id指定resource的唯一标识.
#security.oauth2.resource.jwt.key-uriJWT token的URI. 当key为公钥时，或者value不指定时指定.
#security.oauth2.resource.jwt.key-valueJWT token验证的value. 可以是对称加密或者PEMencoded RSA公钥. 可以使用URI作为value.
#security.oauth2.resource.prefer-token-info是否使用token info，默认为true
#security.oauth2.resource.service-id指定service ID，默认为resource.
#security.oauth2.resource.token-info-uritoken=解码的URI.
#security.oauth2.resource.token-type=指定当使用userInfoUri时，发送的token类型.
#security.oauth2.resource.user-info-uri=指定user info的URI
#security.oauth2.sso.filter-order=如果没有显示提供WebSecurityConfigurerAdapter时指定的Filter order.
#security.oauth2.sso.login-path=跳转到SSO的登录路径默认为/login.
#是否对所有请求开启SSL，默认为false.
#security.require-ssl=
#指定Session的创建策略(always, never, if_required, stateless).
#security.sessions=
#默认用户的授权角色.
security.user.role=ROLE_USER
#指定默认的用户名，默认为user.
security.user.name=admin
#指定默认的密码，默认为UUID.
security.user.password=admin123
#系统登陆方式.LOCAL---自带用户\CONFIG---配置用户\SYSTEM----第三方系统门户
security.login.mode=LOCAL
#密码加密方式:MD5或SHA1
security.password.encode=SHA1
#============================CAS单点登陆====================================================
#是否开启单点登陆功能
cas.security.enabled=true
#CAS服务地址
cas.server.host.url=http://172.16.13.226:8010/cas
#CAS服务登录地址
cas.server.host.login_url=${cas.server.host.url}/login
#CAS服务登出地址
cas.server.host.logout_url=${cas.server.host.url}/logout?service=${app.server.host.url}
#应用访问地址
app.server.host.url=http://172.16.13.226:8010/sea
#应用登录地址
app.login.url=/login
#应用登出地址
app.logout.url=/logout
#===================================第三方系统管理数据源配置信息(security.login.mode=SYSTEM 才有效)

#指定数据源类型：1：oracle、2：mysql、3：hive、4：xcloud
system.datasource.type=1
system.datasource.url=jdbc:oracle:thin:@172.16.14.25:1521:bonc1
system.datasource.driverClassName=oracle.jdbc.driver.OracleDriver
system.datasource.username=kepler_sea_test
system.datasource.password=kepler_sea_test
system.datasource.initialSize=5
system.datasource.maxActive=20
system.datasource.minIdle=0
system.datasource.maxWait=60000
system.datasource.validationQuery=SELECT 1 FROM DUAL
system.datasource.testOnBorrow=false
system.datasource.testOnReturn=false
system.datasource.testWhileIdle=false
#系统登录查询配置语句，字段标准： id, login_name, password, real_name, org_id,
#sex, email, birthday, age, dept_id, postal_code, country, province, city, mobile
system.datasource.querySql=select id, login_name, password, real_name , country, province, city, mobile from sys_user where login_name = '#login_name#'
#============================================================================================================
# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------
#------------------#
#autoconfig 	显示一个auto-configuration的报告，该报告展示所有auto-configuration候选者及它们被应用或未被应用的原因 	true
#beans 	显示一个应用中所有Spring Beans的完整列表 	true
#configprops 	显示一个所有@ConfigurationProperties的整理列表 	true
#dump 	执行一个线程转储 	true
#env 	暴露来自Spring　ConfigurableEnvironment的属性 	true
#health 	展示应用的健康信息（当使用一个未认证连接访问时显示一个简单的’status’，使用认证连接访问则显示全部信息详情） 	false
#	 	显示任意的应用信息 	false
#metrics 	展示当前应用的’指标’信息 	true
#mappings 	显示一个所有@RequestMapping路径的整理列表 	true
#shutdown 	允许应用以优雅的方式关闭（默认情况下不启用） 	true
#trace 	显示trace信息（默认为最新的一些HTTP请求）
#-------------------------#
# MANAGEMENT HTTP SERVER (ManagementServerProperties)
# defaults to 'server.port' #设定management监听端口 ,args 参数：--management.port=8888
management.port=${port:8844}
#management.address= # bind to a specific NIC
# default to '/'
management.contextPath=/sea
# Enable security.
management.security.enabled=false
#============================================================================================================
# ENDPOINTS (AbstractEndpoint subclasses)
#endpoints.autoconfig.id=autoconfig
#endpoints.autoconfig.sensitive=true
#endpoints.autoconfig.enabled=true
#endpoints.beans.id=beans
#endpoints.beans.sensitive=true
#endpoints.beans.enabled=true
#endpoints.configprops.id=configprops
#endpoints.configprops.sensitive=true
#endpoints.configprops.enabled=true
#endpoints.configprops.keys-to-sanitize=password,secret
#endpoints.dump.id=dump
#endpoints.dump.sensitive=true
#endpoints.dump.enabled=true
#endpoints.env.id=env
#endpoints.env.sensitive=true
#endpoints.env.enabled=true
#endpoints.health.id=health
endpoints.health.sensitive=false
#endpoints.health.enabled=true
#endpoints.info.id=info
#endpoints.info.sensitive=false
endpoints.info.enabled=true
#endpoints.metrics.id=metrics
#endpoints.metrics.sensitive=true
#endpoints.metrics.enabled=true
#endpoints.shutdown.id=shutdown
#endpoints.shutdown.sensitive=true
#启用监控/shutdown
endpoints.shutdown.enabled=true
#endpoints.trace.id=trace
#endpoints.trace.sensitive=true
#endpoints.trace.enabled=true
#============================================================================================================
# MVC ONLY ENDPOINTS
#endpoints.jolokia.path=jolokia
#endpoints.jolokia.sensitive=true
#endpoints.jolokia.enabled=true # when using Jolokia
#endpoints.error.path=/error
#============================================================================================================
# JMX ENDPOINT (EndpointMBeanExportProperties)
#endpoints.jmx.enabled=true
#endpoints.jmx.domain= # the JMX domain, defaults to 'org.springboot'
#endpoints.jmx.unique-names=false
#endpoints.jmx.enabled=true
#endpoints.jmx.staticNames=
#============================================================================================================
#控制台访问地址：	http://localhost:15672/
#http://blog.csdn.net/lijinan2008/article/details/51455864---window rabbitMQ 配置远程访问 。
#默认guest是不能远程访问的
# RABBIT (RabbitProperties)
# connection host
spring.rabbitmq.host=172.16.63.148
# connection port
spring.rabbitmq.port=5672
#spring.rabbitmq.addresses= # connection addresses (e.g. myhost:9999,otherhost:1111)
# login user
spring.rabbitmq.username=remote_guest
# login password
spring.rabbitmq.password=remote_guest
#虚拟主机
spring.rabbitmq.virtualhost=/
#spring.rabbitmq.dynamic=
#============================================================================================================
#spring.boot.admin.url=http:localhost:8090
#============================================================================================================
#flyway.baseline-description对执行迁移时基准版本的描述.
#当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.
flyway.baseline-on-migrate=false
#flyway.baseline-version开始执行基准迁移时对现有的schema的版本打标签，默认值为1.
#flyway.check-location检查迁移脚本的位置是否存在，默认false.
#flyway.clean-on-validation-error当发现校验错误时是否自动调用clean，默认false.
#是否开启flywary，默认true.
flyway.enabled=false
#flyway.encoding设置迁移时的编码，默认UTF-8.
#flyway.ignore-failed-future-migration当读取元数据表时是否忽略错误的迁移，默认false.
#flyway.init-sqls当初始化好连接时要执行的SQL.
#flyway.locations迁移脚本的位置，默认db/migration.
#flyway.out-of-order是否允许无序的迁移，默认false.
#flyway.password目标数据库的密码.
#flyway.placeholder-prefix设置每个placeholder的前缀，默认${.
#flyway.placeholder-replacementplaceholders是否要被替换，默认true.
#flyway.placeholder-suffix设置每个placeholder的后缀，默认}.
#flyway.placeholders.[placeholder name]设置placeholder的value
#flyway.schemas设定需要flywary迁移的schema，大小写敏感，默认为连接默认的schema.
#flyway.sql-migration-prefix迁移文件的前缀，默认为V.
#flyway.sql-migration-separator迁移脚本的文件名分隔符，默认__
#flyway.sql-migration-suffix迁移脚本的后缀，默认为.sql
#flyway.table#flyway使用的元数据表名，默认为schema_version
#flyway.target迁移时使用的目标版本，默认为latest version
#flyway.url迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源
#flyway.user迁移数据库的用户名
#flyway.validate-on-migrate迁移时是否校验，默认为true.
# DEVTOOLS (DevToolsProperties)
# Enable a livereload.com compatible server.
#spring.devtools.livereload.enabled=true
# Server port.
#spring.devtools.livereload.port=35729
# Additional patterns that should be excluded from triggering a full restart.
#spring.devtools.restart.additional-exclude=
# Additional paths to watch for changes.
#spring.devtools.restart.additional-paths=
# Enable automatic restart.
spring.devtools.restart.enabled=true
# Patterns that should be excluded from triggering a full restart.
spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties
# Amount of time (in milliseconds) to wait between polling for classpath changes.
#spring.devtools.restart.poll-interval=1000
# Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.
#spring.devtools.restart.quiet-period=400
# Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.
#spring.devtools.restart.trigger-file=
# AOP
# Add @EnableAspectJAutoProxy.
spring.aop.auto=true
# Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).
spring.aop.proxy-target-class=true
#注册中心服务地址
eureka.client.serviceUrl.defaultZone=http://172.16.13.226:8010/eureka/eureka/
#禁用自动注册功能
spring.cloud.service-registry.auto-registration.enabled=false
eureka.instance.statusPageUrlPath=${management.contextPath}/info
eureka.instance.healthCheckUrlPath=${management.contextPath}/health

#------------------oauth2 jwt 加密秘钥------------------------------------
jwt.secret=bonc.oauth2.20170831
#-------------------oauth2---------------------------------------------
#oauth2util中用到的可能发生变化的变量
#测试clientId 可有可无   客户端注册的clientId  每个应用注册时都会生成clientId 在请求oauth2服务端的接口时需要传这个参数  这里的这个是测试用的  接口服务中的clientId在应用管理中生成
oauth2.client.id=23fd0ed0610d44a3bf70ed675ef79fa1
#测试clientSecret  同clientId 可有可无
oauth2.client.secret=72f45d84bee352d78ef88b89bf6160da
#测试用redirectUri  可有可无
oauth2.redirect.uri=${app.server.host.url}/login
#授权服务器申请授权码请求路径 必须有
oauth2.authorize.server.url=${app.server.host.url}/oauth2/authorize
#申请令牌和刷新令牌请求路径  必须有
oauth2.token.endpoint.url=${app.server.host.url}/oauth2/token
#验证令牌有效请求路径  必须有
oauth2.token.check.url=${app.server.host.url}/oauth2/checkToken
#获取令牌中的参数   必须有
oauth2.token.param.url=${app.server.host.url}/oauth2/getParam

#-------------------------登陆失败次数限制-----------------------------------
login.fail.count=6
#登录失败账户锁定时间，单位小时
login.fail.lock.hour=0.5
#-------------------------登陆前台密码加密key有效时间 默认120s------------------------------------------
#login.key.time.limit.seconds=120
#-------------------------登陆后台是否对前台传来的密码解密  默认解密-------------------------------------
#login.pwd.encrypt.enabled=true
